{
	"connections": [
		{
			"from": "voronoi",
			"from_port": 0,
			"to": "invert",
			"to_port": 0
		},
		{
			"from": "fbm_2",
			"from_port": 0,
			"to": "invert_3",
			"to_port": 0
		},
		{
			"from": "invert_3",
			"from_port": 0,
			"to": "tones_2",
			"to_port": 0
		},
		{
			"from": "tones_step_2",
			"from_port": 0,
			"to": "fill_3",
			"to_port": 0
		},
		{
			"from": "fill_3",
			"from_port": 0,
			"to": "fill_to_random_color_2",
			"to_port": 0
		},
		{
			"from": "tones_step_2",
			"from_port": 0,
			"to": "invert_4",
			"to_port": 0
		},
		{
			"from": "invert_4",
			"from_port": 0,
			"to": "dilate_2",
			"to_port": 0
		},
		{
			"from": "fill_to_random_color_2",
			"from_port": 0,
			"to": "dilate_2",
			"to_port": 1
		},
		{
			"from": "dilate_2",
			"from_port": 0,
			"to": "decompose_7",
			"to_port": 0
		},
		{
			"from": "fbm_2",
			"from_port": 1,
			"to": "tones_step_2",
			"to_port": 0
		},
		{
			"from": "voronoi",
			"from_port": 2,
			"to": "decompose_6",
			"to_port": 0
		},
		{
			"from": "decompose_6",
			"from_port": 0,
			"to": "combine",
			"to_port": 1
		},
		{
			"from": "decompose_6",
			"from_port": 1,
			"to": "combine",
			"to_port": 2
		},
		{
			"from": "decompose_6",
			"from_port": 2,
			"to": "combine",
			"to_port": 3
		},
		{
			"from": "decompose_7",
			"from_port": 0,
			"to": "combine_2",
			"to_port": 1
		},
		{
			"from": "decompose_7",
			"from_port": 1,
			"to": "combine_2",
			"to_port": 2
		},
		{
			"from": "decompose_7",
			"from_port": 2,
			"to": "combine_2",
			"to_port": 3
		},
		{
			"from": "tones_2",
			"from_port": 0,
			"to": "combine_2",
			"to_port": 0
		},
		{
			"from": "invert",
			"from_port": 0,
			"to": "combine",
			"to_port": 0
		},
		{
			"from": "fbm_3",
			"from_port": 0,
			"to": "tones_3",
			"to_port": 0
		},
		{
			"from": "tones_3",
			"from_port": 0,
			"to": "graph_2",
			"to_port": 0
		}
	],
	"label": "Graph",
	"longdesc": "",
	"name": "237",
	"node_position": {
		"x": 0,
		"y": 0
	},
	"nodes": [
		{
			"export_paths": {

			},
			"name": "Material",
			"node_position": {
				"x": 0,
				"y": 0
			},
			"parameters": {
				"albedo_color": {
					"a": 1,
					"b": 1,
					"g": 1,
					"r": 1,
					"type": "Color"
				},
				"ao": 1,
				"depth_scale": 0.5,
				"emission_energy": 1,
				"flags_transparent": false,
				"metallic": 1,
				"normal": 1,
				"roughness": 1,
				"size": 11,
				"sss": 0
			},
			"type": "material"
		},
		{
			"color": {
				"a": 1,
				"b": 0,
				"g": 0.5,
				"r": 1,
				"type": "Color"
			},
			"name": "comment_2",
			"node_position": {
				"x": -2131.799805,
				"y": -231.461609
			},
			"parameters": {

			},
			"size": {
				"x": 170.599487,
				"y": 24
			},
			"text": "Very Fine 256\n",
			"title": "Comment",
			"type": "comment"
		},
		{
			"color": {
				"a": 1,
				"b": 0,
				"g": 0.5,
				"r": 1,
				"type": "Color"
			},
			"name": "comment_3",
			"node_position": {
				"x": -2436.199463,
				"y": 275.483521
			},
			"parameters": {

			},
			"size": {
				"x": 176.599609,
				"y": 27.716705
			},
			"text": "Rough 256\n",
			"title": "Comment",
			"type": "comment"
		},
		{
			"color": {
				"a": 1,
				"b": 0,
				"g": 0.5,
				"r": 1,
				"type": "Color"
			},
			"name": "comment_4",
			"node_position": {
				"x": -2450.199463,
				"y": 756.912842
			},
			"parameters": {

			},
			"size": {
				"x": 176.599609,
				"y": 57.716705
			},
			"text": "Very Rough 256\n",
			"title": "Comment",
			"type": "comment"
		},
		{
			"name": "voronoi",
			"node_position": {
				"x": -1885.400024,
				"y": -331.050781
			},
			"parameters": {
				"intensity": 1,
				"randomness": 1,
				"scale_x": 20,
				"scale_y": 20,
				"stretch_x": 0.8,
				"stretch_y": 0.8
			},
			"type": "voronoi"
		},
		{
			"name": "invert",
			"node_position": {
				"x": -1775.800171,
				"y": -148.739136
			},
			"parameters": {

			},
			"type": "invert"
		},
		{
			"name": "decompose_6",
			"node_position": {
				"x": -1603.599854,
				"y": -289.484528
			},
			"parameters": {

			},
			"preview": 2,
			"type": "decompose"
		},
		{
			"name": "combine",
			"node_position": {
				"x": -1545.199951,
				"y": -164.731339
			},
			"parameters": {

			},
			"preview": 0,
			"type": "combine"
		},
		{
			"name": "decompose_7",
			"node_position": {
				"x": -1337.799927,
				"y": 157.135559
			},
			"parameters": {

			},
			"type": "decompose"
		},
		{
			"name": "combine_2",
			"node_position": {
				"x": -1261.199951,
				"y": 305.112335
			},
			"parameters": {

			},
			"preview": 0,
			"seed_value": -58605,
			"type": "combine"
		},
		{
			"name": "fbm_2",
			"node_position": {
				"x": -2209.199951,
				"y": 178.135559
			},
			"parameters": {
				"folds": 0,
				"iterations": 4,
				"noise": 2,
				"persistence": 0.43,
				"scale_x": 22,
				"scale_y": 22
			},
			"shader_model": {
				"code": "",
				"global": "float fbm_value(vec2 coord, vec2 size, float seed) {\n\tvec2 o = floor(coord)+rand2(vec2(float(seed), 1.0-float(seed)))+size;\n\tvec2 f = fract(coord);\n\tfloat p00 = rand(mod(o, size));\n\tfloat p01 = rand(mod(o + vec2(0.0, 1.0), size));\n\tfloat p10 = rand(mod(o + vec2(1.0, 0.0), size));\n\tfloat p11 = rand(mod(o + vec2(1.0, 1.0), size));\n\tvec2 t = f * f * (3.0 - 2.0 * f);\n\treturn mix(mix(p00, p10, t.x), mix(p01, p11, t.x), t.y);\n}\n\nfloat fbm_perlin(vec2 coord, vec2 size, float seed) {\n\tvec2 o = floor(coord)+rand2(vec2(float(seed), 1.0-float(seed)))+size;\n\tvec2 f = fract(coord);\n\tfloat a00 = rand(mod(o, size)) * 6.28318530718;\n\tfloat a01 = rand(mod(o + vec2(0.0, 1.0), size)) * 6.28318530718;\n\tfloat a10 = rand(mod(o + vec2(1.0, 0.0), size)) * 6.28318530718;\n\tfloat a11 = rand(mod(o + vec2(1.0, 1.0), size)) * 6.28318530718;\n\tvec2 v00 = vec2(cos(a00), sin(a00));\n\tvec2 v01 = vec2(cos(a01), sin(a01));\n\tvec2 v10 = vec2(cos(a10), sin(a10));\n\tvec2 v11 = vec2(cos(a11), sin(a11));\n\tfloat p00 = dot(v00, f);\n\tfloat p01 = dot(v01, f - vec2(0.0, 1.0));\n\tfloat p10 = dot(v10, f - vec2(1.0, 0.0));\n\tfloat p11 = dot(v11, f - vec2(1.0, 1.0));\n\tvec2 t = f * f * (3.0 - 2.0 * f);\n\treturn 0.5 + mix(mix(p00, p10, t.x), mix(p01, p11, t.x), t.y);\n}\n\nfloat fbm_perlinabs(vec2 coord, vec2 size, float seed) {\n\treturn abs(2.0*fbm_perlin(coord, size, seed)-1.0);\n}\n\nfloat fbm_cellular(vec2 coord, vec2 size, float seed) {\n\tvec2 o = floor(coord)+rand2(vec2(float(seed), 1.0-float(seed)))+size;\n\tvec2 f = fract(coord);\n\tfloat min_dist = 2.0;\n\tfor(float x = -1.0; x <= 1.0; x++) {\n\t\tfor(float y = -1.0; y <= 1.0; y++) {\n\t\t\tvec2 node = rand2(mod(o + vec2(x, y), size)) + vec2(x, y);\n\t\t\tfloat dist = sqrt((f - node).x * (f - node).x + (f - node).y * (f - node).y);\n\t\t\tmin_dist = min(min_dist, dist);\n\t\t}\n\t}\n\treturn min_dist;\n}\n\nfloat fbm_cellular2(vec2 coord, vec2 size, float seed) {\n\tvec2 o = floor(coord)+rand2(vec2(float(seed), 1.0-float(seed)))+size;\n\tvec2 f = fract(coord);\n\tfloat min_dist1 = 2.0;\n\tfloat min_dist2 = 2.0;\n\tfor(float x = -1.0; x <= 1.0; x++) {\n\t\tfor(float y = -1.0; y <= 1.0; y++) {\n\t\t\tvec2 node = rand2(mod(o + vec2(x, y), size)) + vec2(x, y);\n\t\t\tfloat dist = sqrt((f - node).x * (f - node).x + (f - node).y * (f - node).y);\n\t\t\tif (min_dist1 > dist) {\n\t\t\t\tmin_dist2 = min_dist1;\n\t\t\t\tmin_dist1 = dist;\n\t\t\t} else if (min_dist2 > dist) {\n\t\t\t\tmin_dist2 = dist;\n\t\t\t}\n\t\t}\n\t}\n\treturn min_dist2-min_dist1;\n}\n\nfloat fbm_cellular3(vec2 coord, vec2 size, float seed) {\n\tvec2 o = floor(coord)+rand2(vec2(float(seed), 1.0-float(seed)))+size;\n\tvec2 f = fract(coord);\n\tfloat min_dist = 2.0;\n\tfor(float x = -1.0; x <= 1.0; x++) {\n\t\tfor(float y = -1.0; y <= 1.0; y++) {\n\t\t\tvec2 node = rand2(mod(o + vec2(x, y), size))*0.5 + vec2(x, y);\n\t\t\tfloat dist = abs((f - node).x) + abs((f - node).y);\n\t\t\tmin_dist = min(min_dist, dist);\n\t\t}\n\t}\n\treturn min_dist;\n}\n\nfloat fbm_cellular4(vec2 coord, vec2 size, float seed) {\n\tvec2 o = floor(coord)+rand2(vec2(float(seed), 1.0-float(seed)))+size;\n\tvec2 f = fract(coord);\n\tfloat min_dist1 = 2.0;\n\tfloat min_dist2 = 2.0;\n\tfor(float x = -1.0; x <= 1.0; x++) {\n\t\tfor(float y = -1.0; y <= 1.0; y++) {\n\t\t\tvec2 node = rand2(mod(o + vec2(x, y), size))*0.5 + vec2(x, y);\n\t\t\tfloat dist = abs((f - node).x) + abs((f - node).y);\n\t\t\tif (min_dist1 > dist) {\n\t\t\t\tmin_dist2 = min_dist1;\n\t\t\t\tmin_dist1 = dist;\n\t\t\t} else if (min_dist2 > dist) {\n\t\t\t\tmin_dist2 = dist;\n\t\t\t}\n\t\t}\n\t}\n\treturn min_dist2-min_dist1;\n}\n\nfloat fbm_cellular5(vec2 coord, vec2 size, float seed) {\n\tvec2 o = floor(coord)+rand2(vec2(float(seed), 1.0-float(seed)))+size;\n\tvec2 f = fract(coord);\n\tfloat min_dist = 2.0;\n\tfor(float x = -1.0; x <= 1.0; x++) {\n\t\tfor(float y = -1.0; y <= 1.0; y++) {\n\t\t\tvec2 node = rand2(mod(o + vec2(x, y), size)) + vec2(x, y);\n\t\t\tfloat dist = max(abs((f - node).x), abs((f - node).y));\n\t\t\tmin_dist = min(min_dist, dist);\n\t\t}\n\t}\n\treturn min_dist;\n}\n\nfloat fbm_cellular6(vec2 coord, vec2 size, float seed) {\n\tvec2 o = floor(coord)+rand2(vec2(float(seed), 1.0-float(seed)))+size;\n\tvec2 f = fract(coord);\n\tfloat min_dist1 = 2.0;\n\tfloat min_dist2 = 2.0;\n\tfor(float x = -1.0; x <= 1.0; x++) {\n\t\tfor(float y = -1.0; y <= 1.0; y++) {\n\t\t\tvec2 node = rand2(mod(o + vec2(x, y), size)) + vec2(x, y);\n\t\t\tfloat dist = max(abs((f - node).x), abs((f - node).y));\n\t\t\tif (min_dist1 > dist) {\n\t\t\t\tmin_dist2 = min_dist1;\n\t\t\t\tmin_dist1 = dist;\n\t\t\t} else if (min_dist2 > dist) {\n\t\t\t\tmin_dist2 = dist;\n\t\t\t}\n\t\t}\n\t}\n\treturn min_dist2-min_dist1;\n}\n",
				"inputs": [

				],
				"instance": "vec3 $(name)_fbm(vec2 coord, vec2 size, int folds, int octaves, float persistence, float seed) {\n\tfloat normalize_factor = 0.0;\n\tfloat value = 0.0;\n\tfloat scale = 1.0;\n\tfloat simple_noise;\n\tfor (int i = 0; i < octaves; i++) {\n\t\tfloat noise = fbm_$noise(coord*size, size, seed);\n\t\tfor (int f = 0; f < folds; ++f) {\n\t\t\tnoise = abs(2.0*noise-1.0);\n\t\t}\n\t\tvalue += noise * scale;\n\t\tnormalize_factor += scale;\n\t\tsize *= 2.0;\n\t\tscale *= persistence;\n\t\tif (i == 0) {\n\t\t\tsimple_noise = value;\n\t\t}\n\t}\n\tfloat noise = value / normalize_factor;\n\treturn vec3(noise, simple_noise, 0.0);\n}\n",
				"longdesc": "Generates a noise made of several octaves of a simple noise",
				"name": "FBM",
				"outputs": [
					{
						"f": "$(name)_fbm($(uv), vec2($(scale_x), $(scale_y)), int($(folds)), int($(iterations)), $(persistence), float($(seed))).x",
						"longdesc": "Shows a greyscale image of the generated noise",
						"shortdesc": "Output",
						"type": "f"
					},
					{
						"f": "$(name)_fbm($(uv), vec2($(scale_x), $(scale_y)), int($(folds)), int($(iterations)), $(persistence), float($(seed))).y",
						"type": "f"
					}
				],
				"parameters": [
					{
						"default": 0,
						"label": "Noise",
						"longdesc": "The simple noise type",
						"name": "noise",
						"shortdesc": "Noise type",
						"type": "enum",
						"values": [
							{
								"name": "Value",
								"value": "value"
							},
							{
								"name": "Perlin",
								"value": "perlin"
							},
							{
								"name": "Cellular",
								"value": "cellular"
							},
							{
								"name": "Cellular2",
								"value": "cellular2"
							},
							{
								"name": "Cellular3",
								"value": "cellular3"
							},
							{
								"name": "Cellular4",
								"value": "cellular4"
							},
							{
								"name": "Cellular5",
								"value": "cellular5"
							},
							{
								"name": "Cellular6",
								"value": "cellular6"
							}
						]
					},
					{
						"control": "None",
						"default": 4,
						"label": "Scale X",
						"longdesc": "The scale of the first octave along the X axis",
						"max": 32,
						"min": 1,
						"name": "scale_x",
						"shortdesc": "Scale.x",
						"step": 1,
						"type": "float"
					},
					{
						"control": "None",
						"default": 4,
						"label": "Scale Y",
						"longdesc": "The scale of the first octave along the Y axis",
						"max": 32,
						"min": 1,
						"name": "scale_y",
						"shortdesc": "Scale.y",
						"step": 1,
						"type": "float"
					},
					{
						"control": "None",
						"default": 0,
						"label": "Folds",
						"longdesc": "The number of times the basic noise is folded",
						"max": 5,
						"min": 0,
						"name": "folds",
						"shortdesc": "Folds",
						"step": 1,
						"type": "float"
					},
					{
						"control": "None",
						"default": 3,
						"label": "Iterations",
						"longdesc": "The number of noise octaves",
						"max": 10,
						"min": 1,
						"name": "iterations",
						"shortdesc": "Octaves",
						"step": 1,
						"type": "float"
					},
					{
						"control": "None",
						"default": 0.5,
						"label": "Persistence",
						"longdesc": "The persistence between two consecutive octaves",
						"max": 1,
						"min": 0,
						"name": "persistence",
						"shortdesc": "Persistence",
						"step": 0.01,
						"type": "float"
					}
				],
				"shortdesc": "Fractional Brownian Motion Noise"
			},
			"type": "shader"
		},
		{
			"name": "invert_3",
			"node_position": {
				"x": -2090.199951,
				"y": 438.135559
			},
			"parameters": {

			},
			"type": "invert"
		},
		{
			"name": "tones_2",
			"node_position": {
				"x": -1608.199951,
				"y": 359.135559
			},
			"parameters": {
				"in_max": {
					"a": 1,
					"b": 0.8875,
					"g": 0.8875,
					"r": 0.8875,
					"type": "Color"
				},
				"in_mid": {
					"a": 0.5,
					"b": 0.587501,
					"g": 0.587501,
					"r": 0.587501,
					"type": "Color"
				},
				"in_min": {
					"a": 0,
					"b": 0.21875,
					"g": 0.21875,
					"r": 0.21875,
					"type": "Color"
				},
				"out_max": {
					"a": 1,
					"b": 0.88125,
					"g": 0.88125,
					"r": 0.88125,
					"type": "Color"
				},
				"out_min": {
					"a": 0,
					"b": 0.0625,
					"g": 0.0625,
					"r": 0.0625,
					"type": "Color"
				}
			},
			"type": "tones"
		},
		{
			"name": "tones_step_2",
			"node_position": {
				"x": -1929.199951,
				"y": 137.135559
			},
			"parameters": {
				"invert": false,
				"value": 0.06,
				"width": 0
			},
			"type": "tones_step"
		},
		{
			"name": "dilate_2",
			"node_position": {
				"x": -1569.199951,
				"y": 157.135559
			},
			"parameters": {
				"param0": 10,
				"param1": 0.1,
				"param2": 1,
				"param3": 0
			},
			"type": "dilate"
		},
		{
			"name": "fill_3",
			"node_position": {
				"x": -1909.199951,
				"y": 257.135559
			},
			"parameters": {
				"param0": 10,
				"param1": 10
			},
			"type": "fill"
		},
		{
			"name": "fill_to_random_color_2",
			"node_position": {
				"x": -1929.199951,
				"y": 337.135559
			},
			"parameters": {
				"edgecolor": {
					"a": 1,
					"b": 1,
					"g": 1,
					"r": 1,
					"type": "Color"
				}
			},
			"type": "fill_to_random_color"
		},
		{
			"name": "invert_4",
			"node_position": {
				"x": -1709.199951,
				"y": 137.135559
			},
			"parameters": {

			},
			"type": "invert"
		},
		{
			"connections": [
				{
					"from": "tones_step",
					"from_port": 0,
					"to": "fill_2",
					"to_port": 0
				},
				{
					"from": "fill_2",
					"from_port": 0,
					"to": "fill_to_random_color",
					"to_port": 0
				},
				{
					"from": "tones_step",
					"from_port": 0,
					"to": "invert_2",
					"to_port": 0
				},
				{
					"from": "invert_2",
					"from_port": 0,
					"to": "dilate",
					"to_port": 0
				},
				{
					"from": "fill_to_random_color",
					"from_port": 0,
					"to": "dilate",
					"to_port": 1
				},
				{
					"from": "gen_inputs",
					"from_port": 0,
					"to": "combine_3",
					"to_port": 0
				},
				{
					"from": "decompose_8",
					"from_port": 0,
					"to": "combine_3",
					"to_port": 1
				},
				{
					"from": "decompose_8",
					"from_port": 1,
					"to": "combine_3",
					"to_port": 2
				},
				{
					"from": "decompose_8",
					"from_port": 2,
					"to": "combine_3",
					"to_port": 3
				},
				{
					"from": "combine_3",
					"from_port": 0,
					"to": "gen_outputs",
					"to_port": 0
				},
				{
					"from": "gaussian_blur",
					"from_port": 0,
					"to": "tones_step",
					"to_port": 0
				},
				{
					"from": "gen_inputs",
					"from_port": 0,
					"to": "gaussian_blur",
					"to_port": 0
				},
				{
					"from": "dilate",
					"from_port": 0,
					"to": "decompose_8",
					"to_port": 0
				}
			],
			"label": "cell_gen",
			"longdesc": "",
			"name": "graph_2",
			"node_position": {
				"x": -1590.015259,
				"y": 725.256531
			},
			"nodes": [
				{
					"name": "decompose_8",
					"node_position": {
						"x": -1585.796387,
						"y": 176.626068
					},
					"parameters": {

					},
					"type": "decompose"
				},
				{
					"name": "fill_2",
					"node_position": {
						"x": -1566.796387,
						"y": 40.826454
					},
					"parameters": {
						"param0": 8,
						"param1": 10
					},
					"type": "fill"
				},
				{
					"name": "tones_step",
					"node_position": {
						"x": -1807.996338,
						"y": 37.626068
					},
					"parameters": {
						"invert": true,
						"value": 0.68,
						"width": 0
					},
					"type": "tones_step"
				},
				{
					"name": "fill_to_random_color",
					"node_position": {
						"x": -2039.796387,
						"y": 234.626068
					},
					"parameters": {
						"edgecolor": {
							"a": 1,
							"b": 1,
							"g": 1,
							"r": 1,
							"type": "Color"
						}
					},
					"type": "fill_to_random_color"
				},
				{
					"name": "invert_2",
					"node_position": {
						"x": -1956.796387,
						"y": 166.626068
					},
					"parameters": {

					},
					"type": "invert"
				},
				{
					"name": "dilate",
					"node_position": {
						"x": -1760.796387,
						"y": 184.826462
					},
					"parameters": {
						"param0": 8,
						"param1": 0.1,
						"param2": 1,
						"param3": 0
					},
					"type": "dilate"
				},
				{
					"name": "combine_3",
					"node_position": {
						"x": -1404.796387,
						"y": 134.626068
					},
					"parameters": {

					},
					"type": "combine"
				},
				{
					"name": "gen_inputs",
					"node_position": {
						"x": -2477.996338,
						"y": 122.054657
					},
					"parameters": {

					},
					"ports": [
						{
							"group_size": 0,
							"name": "port0",
							"type": "rgba"
						}
					],
					"type": "ios"
				},
				{
					"name": "gen_outputs",
					"node_position": {
						"x": -1149.796387,
						"y": 127.255043
					},
					"parameters": {

					},
					"ports": [
						{
							"group_size": 0,
							"longdesc": "",
							"name": "unnamed",
							"shortdesc": "",
							"type": "rgba"
						}
					],
					"type": "ios"
				},
				{
					"name": "gen_parameters",
					"node_position": {
						"x": -1802.22522,
						"y": -143.373932
					},
					"parameters": {
						"param0": 0.68,
						"param1": 8
					},
					"type": "remote",
					"widgets": [
						{
							"label": "cutoff",
							"linked_widgets": [
								{
									"node": "tones_step",
									"widget": "value"
								}
							],
							"name": "param0",
							"type": "linked_control"
						},
						{
							"label": "size",
							"linked_widgets": [
								{
									"node": "fill_2",
									"widget": "param0"
								},
								{
									"node": "dilate",
									"widget": "param0"
								}
							],
							"name": "param1",
							"type": "linked_control"
						}
					]
				},
				{
					"name": "gaussian_blur",
					"node_position": {
						"x": -2068.639404,
						"y": -3.838196
					},
					"parameters": {
						"param0": 9,
						"param1": 0.9,
						"param2": 0
					},
					"type": "gaussian_blur"
				}
			],
			"parameters": {
				"param0": 0.68,
				"param1": 8
			},
			"preview": 0,
			"shortdesc": "",
			"type": "graph"
		},
		{
			"name": "fbm_3",
			"node_position": {
				"x": -2212.506592,
				"y": 720.404236
			},
			"parameters": {
				"folds": 1,
				"iterations": 5,
				"noise": 2,
				"persistence": 0.5,
				"scale_x": 7,
				"scale_y": 7
			},
			"shader_model": {
				"code": "",
				"global": "float fbm_value(vec2 coord, vec2 size, float seed) {\n\tvec2 o = floor(coord)+rand2(vec2(float(seed), 1.0-float(seed)))+size;\n\tvec2 f = fract(coord);\n\tfloat p00 = rand(mod(o, size));\n\tfloat p01 = rand(mod(o + vec2(0.0, 1.0), size));\n\tfloat p10 = rand(mod(o + vec2(1.0, 0.0), size));\n\tfloat p11 = rand(mod(o + vec2(1.0, 1.0), size));\n\tvec2 t = f * f * (3.0 - 2.0 * f);\n\treturn mix(mix(p00, p10, t.x), mix(p01, p11, t.x), t.y);\n}\n\nfloat fbm_perlin(vec2 coord, vec2 size, float seed) {\n\tvec2 o = floor(coord)+rand2(vec2(float(seed), 1.0-float(seed)))+size;\n\tvec2 f = fract(coord);\n\tfloat a00 = rand(mod(o, size)) * 6.28318530718;\n\tfloat a01 = rand(mod(o + vec2(0.0, 1.0), size)) * 6.28318530718;\n\tfloat a10 = rand(mod(o + vec2(1.0, 0.0), size)) * 6.28318530718;\n\tfloat a11 = rand(mod(o + vec2(1.0, 1.0), size)) * 6.28318530718;\n\tvec2 v00 = vec2(cos(a00), sin(a00));\n\tvec2 v01 = vec2(cos(a01), sin(a01));\n\tvec2 v10 = vec2(cos(a10), sin(a10));\n\tvec2 v11 = vec2(cos(a11), sin(a11));\n\tfloat p00 = dot(v00, f);\n\tfloat p01 = dot(v01, f - vec2(0.0, 1.0));\n\tfloat p10 = dot(v10, f - vec2(1.0, 0.0));\n\tfloat p11 = dot(v11, f - vec2(1.0, 1.0));\n\tvec2 t = f * f * (3.0 - 2.0 * f);\n\treturn 0.5 + mix(mix(p00, p10, t.x), mix(p01, p11, t.x), t.y);\n}\n\nfloat fbm_perlinabs(vec2 coord, vec2 size, float seed) {\n\treturn abs(2.0*fbm_perlin(coord, size, seed)-1.0);\n}\n\nvec2 rgrad2(vec2 p, float rot) {\n\tfloat u = rand(p);\n\tu = fract(u) * 6.28318530718; // 2*pi\n\treturn vec2(cos(u), sin(u));\n}\n\nfloat fbm_simplex(vec2 coord, vec2 size, float seed) {\n\tcoord *= 2.0; // needed for it to tile\n\tcoord += rand2(vec2(float(seed), 1.0-float(seed))) + size;\n\tsize *= 2.0; // needed for it to tile\n\tcoord.y += 0.001;\n    vec2 uv = vec2(coord.x + coord.y*0.5, coord.y);\n    vec2 i0 = floor(uv);\n    vec2 f0 = fract(uv);\n    vec2 i1 = (f0.x > f0.y) ? vec2(1.0, 0.0) : vec2(0.0, 1.0);\n    vec2 p0 = vec2(i0.x - i0.y * 0.5, i0.y);\n    vec2 p1 = vec2(p0.x + i1.x - i1.y * 0.5, p0.y + i1.y);\n    vec2 p2 = vec2(p0.x + 0.5, p0.y + 1.0);\n    i1 = i0 + i1;\n    vec2 i2 = i0 + vec2(1.0, 1.0);\n    vec2 d0 = coord - p0;\n    vec2 d1 = coord - p1;\n    vec2 d2 = coord - p2;\n    vec3 xw = mod(vec3(p0.x, p1.x, p2.x), size.x);\n    vec3 yw = mod(vec3(p0.y, p1.y, p2.y), size.y);\n    vec3 iuw = xw + 0.5 * yw;\n    vec3 ivw = yw;\n    vec2 g0 = rgrad2(vec2(iuw.x, ivw.x), 0.0);\n    vec2 g1 = rgrad2(vec2(iuw.y, ivw.y), 0.0);\n    vec2 g2 = rgrad2(vec2(iuw.z, ivw.z), 0.0);\n    vec3 w = vec3(dot(g0, d0), dot(g1, d1), dot(g2, d2));\n    vec3 t = 0.8 - vec3(dot(d0, d0), dot(d1, d1), dot(d2, d2));\n    t = max(t, vec3(0.0));\n    vec3 t2 = t * t;\n    vec3 t4 = t2 * t2;\n    float n = dot(t4, w);\n    return 0.5 + 5.5 * n;\n}\n\nfloat fbm_cellular(vec2 coord, vec2 size, float seed) {\n\tvec2 o = floor(coord)+rand2(vec2(float(seed), 1.0-float(seed)))+size;\n\tvec2 f = fract(coord);\n\tfloat min_dist = 2.0;\n\tfor(float x = -1.0; x <= 1.0; x++) {\n\t\tfor(float y = -1.0; y <= 1.0; y++) {\n\t\t\tvec2 node = rand2(mod(o + vec2(x, y), size)) + vec2(x, y);\n\t\t\tfloat dist = sqrt((f - node).x * (f - node).x + (f - node).y * (f - node).y);\n\t\t\tmin_dist = min(min_dist, dist);\n\t\t}\n\t}\n\treturn min_dist;\n}\n\nfloat fbm_cellular2(vec2 coord, vec2 size, float seed) {\n\tvec2 o = floor(coord)+rand2(vec2(float(seed), 1.0-float(seed)))+size;\n\tvec2 f = fract(coord);\n\tfloat min_dist1 = 2.0;\n\tfloat min_dist2 = 2.0;\n\tfor(float x = -1.0; x <= 1.0; x++) {\n\t\tfor(float y = -1.0; y <= 1.0; y++) {\n\t\t\tvec2 node = rand2(mod(o + vec2(x, y), size)) + vec2(x, y);\n\t\t\tfloat dist = sqrt((f - node).x * (f - node).x + (f - node).y * (f - node).y);\n\t\t\tif (min_dist1 > dist) {\n\t\t\t\tmin_dist2 = min_dist1;\n\t\t\t\tmin_dist1 = dist;\n\t\t\t} else if (min_dist2 > dist) {\n\t\t\t\tmin_dist2 = dist;\n\t\t\t}\n\t\t}\n\t}\n\treturn min_dist2-min_dist1;\n}\n\nfloat fbm_cellular3(vec2 coord, vec2 size, float seed) {\n\tvec2 o = floor(coord)+rand2(vec2(float(seed), 1.0-float(seed)))+size;\n\tvec2 f = fract(coord);\n\tfloat min_dist = 2.0;\n\tfor(float x = -1.0; x <= 1.0; x++) {\n\t\tfor(float y = -1.0; y <= 1.0; y++) {\n\t\t\tvec2 node = rand2(mod(o + vec2(x, y), size))*0.5 + vec2(x, y);\n\t\t\tfloat dist = abs((f - node).x) + abs((f - node).y);\n\t\t\tmin_dist = min(min_dist, dist);\n\t\t}\n\t}\n\treturn min_dist;\n}\n\nfloat fbm_cellular4(vec2 coord, vec2 size, float seed) {\n\tvec2 o = floor(coord)+rand2(vec2(float(seed), 1.0-float(seed)))+size;\n\tvec2 f = fract(coord);\n\tfloat min_dist1 = 2.0;\n\tfloat min_dist2 = 2.0;\n\tfor(float x = -1.0; x <= 1.0; x++) {\n\t\tfor(float y = -1.0; y <= 1.0; y++) {\n\t\t\tvec2 node = rand2(mod(o + vec2(x, y), size))*0.5 + vec2(x, y);\n\t\t\tfloat dist = abs((f - node).x) + abs((f - node).y);\n\t\t\tif (min_dist1 > dist) {\n\t\t\t\tmin_dist2 = min_dist1;\n\t\t\t\tmin_dist1 = dist;\n\t\t\t} else if (min_dist2 > dist) {\n\t\t\t\tmin_dist2 = dist;\n\t\t\t}\n\t\t}\n\t}\n\treturn min_dist2-min_dist1;\n}\n\nfloat fbm_cellular5(vec2 coord, vec2 size, float seed) {\n\tvec2 o = floor(coord)+rand2(vec2(float(seed), 1.0-float(seed)))+size;\n\tvec2 f = fract(coord);\n\tfloat min_dist = 2.0;\n\tfor(float x = -1.0; x <= 1.0; x++) {\n\t\tfor(float y = -1.0; y <= 1.0; y++) {\n\t\t\tvec2 node = rand2(mod(o + vec2(x, y), size)) + vec2(x, y);\n\t\t\tfloat dist = max(abs((f - node).x), abs((f - node).y));\n\t\t\tmin_dist = min(min_dist, dist);\n\t\t}\n\t}\n\treturn min_dist;\n}\n\nfloat fbm_cellular6(vec2 coord, vec2 size, float seed) {\n\tvec2 o = floor(coord)+rand2(vec2(float(seed), 1.0-float(seed)))+size;\n\tvec2 f = fract(coord);\n\tfloat min_dist1 = 2.0;\n\tfloat min_dist2 = 2.0;\n\tfor(float x = -1.0; x <= 1.0; x++) {\n\t\tfor(float y = -1.0; y <= 1.0; y++) {\n\t\t\tvec2 node = rand2(mod(o + vec2(x, y), size)) + vec2(x, y);\n\t\t\tfloat dist = max(abs((f - node).x), abs((f - node).y));\n\t\t\tif (min_dist1 > dist) {\n\t\t\t\tmin_dist2 = min_dist1;\n\t\t\t\tmin_dist1 = dist;\n\t\t\t} else if (min_dist2 > dist) {\n\t\t\t\tmin_dist2 = dist;\n\t\t\t}\n\t\t}\n\t}\n\treturn min_dist2-min_dist1;\n}\n",
				"inputs": [

				],
				"instance": "float $(name)_fbm(vec2 coord, vec2 size, int folds, int octaves, float persistence, float seed) {\n\tfloat normalize_factor = 0.0;\n\tfloat value = 0.0;\n\tfloat scale = 1.0;\n\tfor (int i = 0; i < octaves; i++) {\n\t\tfloat noise = fbm_$noise(coord*size, size, seed);\n\t\tfor (int f = 0; f < folds; ++f) {\n\t\t\tnoise = abs(2.0*noise-1.0);\n\t\t}\n\t\tvalue += noise * scale;\n\t\tnormalize_factor += scale;\n\t\tsize *= 2.0;\n\t\tscale *= persistence;\n\t}\n\treturn value / normalize_factor;\n}\n",
				"longdesc": "Generates a noise made of several octaves of a simple noise",
				"name": "FBM",
				"outputs": [
					{
						"f": "$(name)_fbm($(uv), vec2($(scale_x), $(scale_y)), int($(folds)), int($(iterations)), $(persistence), float($(seed)))",
						"longdesc": "Shows a greyscale image of the generated noise",
						"shortdesc": "Output",
						"type": "f"
					}
				],
				"parameters": [
					{
						"default": 2,
						"label": "Noise",
						"longdesc": "The simple noise type",
						"name": "noise",
						"shortdesc": "Noise type",
						"type": "enum",
						"values": [
							{
								"name": "Value",
								"value": "value"
							},
							{
								"name": "Perlin",
								"value": "perlin"
							},
							{
								"name": "Simplex",
								"value": "simplex"
							},
							{
								"name": "Cellular",
								"value": "cellular"
							},
							{
								"name": "Cellular2",
								"value": "cellular2"
							},
							{
								"name": "Cellular3",
								"value": "cellular3"
							},
							{
								"name": "Cellular4",
								"value": "cellular4"
							},
							{
								"name": "Cellular5",
								"value": "cellular5"
							},
							{
								"name": "Cellular6",
								"value": "cellular6"
							}
						]
					},
					{
						"control": "None",
						"default": 4,
						"label": "Scale X",
						"longdesc": "The scale of the first octave along the X axis",
						"max": 32,
						"min": 1,
						"name": "scale_x",
						"shortdesc": "Scale.x",
						"step": 1,
						"type": "float"
					},
					{
						"control": "None",
						"default": 4,
						"label": "Scale Y",
						"longdesc": "The scale of the first octave along the Y axis",
						"max": 32,
						"min": 1,
						"name": "scale_y",
						"shortdesc": "Scale.y",
						"step": 1,
						"type": "float"
					},
					{
						"control": "None",
						"default": 0,
						"label": "Folds",
						"longdesc": "The number of times the basic noise is folded",
						"max": 5,
						"min": 0,
						"name": "folds",
						"shortdesc": "Folds",
						"step": 1,
						"type": "float"
					},
					{
						"control": "None",
						"default": 3,
						"label": "Iterations",
						"longdesc": "The number of noise octaves",
						"max": 10,
						"min": 1,
						"name": "iterations",
						"shortdesc": "Octaves",
						"step": 1,
						"type": "float"
					},
					{
						"control": "None",
						"default": 0.5,
						"label": "Persistence",
						"longdesc": "The persistence between two consecutive octaves",
						"max": 1,
						"min": 0,
						"name": "persistence",
						"shortdesc": "Persistence",
						"step": 0.01,
						"type": "float"
					}
				],
				"shortdesc": "Fractional Brownian Motion Noise"
			},
			"type": "shader"
		},
		{
			"name": "tones_3",
			"node_position": {
				"x": -1911.19519,
				"y": 712.795593
			},
			"parameters": {
				"in_max": {
					"a": 1,
					"b": 0.89,
					"g": 0.89,
					"r": 0.89,
					"type": "Color"
				},
				"in_mid": {
					"a": 0.5,
					"b": 0.445,
					"g": 0.445,
					"r": 0.445,
					"type": "Color"
				},
				"in_min": {
					"a": 0,
					"b": 0,
					"g": 0,
					"r": 0,
					"type": "Color"
				},
				"out_max": {
					"a": 1,
					"b": 1,
					"g": 1,
					"r": 1,
					"type": "Color"
				},
				"out_min": {
					"a": 0,
					"b": 0,
					"g": 0,
					"r": 0,
					"type": "Color"
				}
			},
			"type": "tones"
		}
	],
	"parameters": {

	},
	"shortdesc": "",
	"type": "graph"
}